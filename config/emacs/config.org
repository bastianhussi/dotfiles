[[https://github.com/daedreth/UncleDavesEmacs/][Uncle Dave]]
[[https://github.com/howardabrams/dot-files/][Howard Abrams]]
[[https://github.com/angrybacon/dotemacs][Angrybacon]]
[[https://config.daviwil.com/emacs][David Wilson]]

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Bastian Hussi")
#+end_src

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'gnutls
  (eval-when-compile
    (require 'gnutls))
  ;; Path to self signed certificates.
  (add-to-list 'gnutls-trustfiles
               (expand-file-name "ssl/certs/*.pem" (or (getenv "XDG_CONFIG_HOME") "~/.config")))
  ;; Do not cause an error when the hostname doesn't match the certificateâ€™s host name.
  (setq gnutls-verify-error :trustfiles
        gnutls-min-prime-bits 4096))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

| =use-package= | [[https://github.com/jwiegley/use-package][Github]] |
#+begin_src emacs-lisp :tangle yes
(straight-use-package 'use-package)
;; Report about loading packages in the message buffer
;; NOTE: when using this feature you need to require use-package in each file using it.
(setq use-package-verbose t
      ;; Gather statistics
      use-package-compute-statistics t)
#+end_src

Startup
#+begin_src emacs-lisp :tangle yes
;; Prevent the startup message about GNU Emacs and the GNU system
(fset 'display-startup-echo-area-message 'ignore)

(setq inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message nil
      initial-major-mode 'org-mode)
#+end_src

Dialogs
#+begin_src emacs-lisp :tangle yes
;; Typing out yes / no is waaaaay to tedious
(fset 'yes-or-no-p 'y-or-n-p)

(setq confirm-kill-emacs 'y-or-n-p
      ;; Do not use GTK-Dialogs (e.g. when for confirmation to kill Emacs)
      use-dialog-box nil
      use-file-dialog nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq-default warning-minimum-level :error
              warning-minimum-log-level :warning)
#+end_src

#+begin_src emacs-lisp :tangle yes
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   'utf-8)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package faces
  :commands my/faces-fontset-emojis
  :custom-face
  (variable-pitch ((t (:family "Cantarell"      :height 150))))
  (fixed-pitch    ((t (:family "Fira Code"      :height 160))))
  (default        ((t (:family "JetBrains Mono" :height 160))))
  :config
  ;; Prevent the default font from displaying symbols
  (setq use-default-font-for-symbols nil)
  (defun my/faces-fontset-emojis ()
    "Enable colorful emojis."
    (set-fontset-font t 'symbol "Noto Color Emoji")
    (set-fontset-font t 'symbol "Symbola" nil 'append))
  :hook
  (window-setup            . my/faces-fontset-emojis)
  (server-after-make-frame . my/faces-fontset-emojis))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package font-lock
  :defer t
  :custom-face
  (font-lock-constant-face ((t (:weight bold))))
  (font-lock-comment-face  ((t (:slant italic))))
  (font-lock-string-face   ((t (:slant italic))))
  :config
  ;; Increase font-lock speed. Otherwise this may take some time.
  (setq jit-lock-stealth-time 0.12
        jit-lock-stealth-nice 0.05))
#+end_src

| =ligature= | [[https://github.com/mickeynp/ligature.el][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package ligature
  :if (>= emacs-major-version 28)
  :straight '(:host github :repo "mickeynp/ligature.el")
  :commands global-ligature-mode
  :config
  (ligature-set-ligatures
   'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
  ;; Enables ligature checks globally in all buffers.
  :hook (window-setup . global-ligature-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes

;; Make Emacs treat underscore as a word character
(modify-syntax-entry ?_ "w")
;; Same for single quotation mark
(modify-syntax-entry ?' "w")
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Hide the cursor in inactive windows
(setq-default cursor-in-non-selected-windows nil
              fill-column 80
              indent-tabs-mode nil
              tab-width 4
              tab-always-indent nil)
#+end_src

| =epa-file= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package epa-file
  :custom
   ;; cache passphrase for symmetric encryption.
  (epa-file-cache-passphrase-for-symmetric-encryption t)
  ;; Any value other than t or nil will prevent Emacs from asking for
  ;; recipients when encrypting files
  (epa-file-select-keys 1)
  :config
  ;; use the minibuffer instead of external program
  (setq epg-pinentry-mode 'loopback)
  ;; Prefer the encrypted authinfo-file
  (setq auth-sources '((:source "~/.authinfo.gpg")
                       (:source "~/.authinfo")))
  ;; ensure this is enabled (is by default)
  :hook (after-init . epa-file-enable))
#+end_src

| =files= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; REVIEW: is the use of `use-package' really necessary here?
(use-package files
  :defer t
  :custom
  (large-file-warning-threshold nil) ;; Don't warn for large files
  (backup-by-copying t)
  (delete-old-versions t) ;; Delete old versions without confirmation
  (kept-new-versions 1)
  (kept-old-versions 1)
  (version-control t) ;; use vc unconditionally to backup files
  (backup-directory-alist
   `((".*" . ,temporary-file-directory)))
  (auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t)))
  :config
  (setq auto-save-list-file-prefix temporary-file-directory
        ;; Move files to thrash instead of deleting them right away
        delete-by-moving-to-trash t
        ;; Prevent issues with build-watchers
        create-lockfiles nil))
#+end_src

| =colorful-theme= | Custom |
#+begin_src emacs-lisp :tangle yes
(use-package colorful-theme
  :load-path default-directory
  :init
  (setq custom-safe-themes t
        ring-bell-function 'ignore)
  :custom
  (colorful-height-title-1 1.3)
  (colorful-height-title-2 1.2)
  (colorful-height-title-3 1.1)
  :config
  (defun my/load-theme ()
    (when (display-graphic-p)
        (load-theme 'colorful)))
  :hook
  (window-setup            . my/load-theme)
  (server-after-make-frame . my/load-theme))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Proudly stolen from https://github.com/rougier/elegant-emacs
(defun my/mode-line-render (left right)
  (let* ((available-width (- (window-width) (length left))))
    (format (format "%%s %%%ds" available-width) left right)))

(defconst MY/MODE-LINE-SEPARATOR (propertize " " 'face '(:inherit nil)))

;; REVIEW: defer this? (use `window-setup-hook')
;; TODO: split this into functions and move this into its own file
(setq-default
 mode-line-format
 '((:eval
    (my/mode-line-render
     ;; Left hand side
     (format-mode-line
      (list
       MY/MODE-LINE-SEPARATOR
       '(:eval (cond
                ((eq evil-state 'normal) (propertize " <N> " 'face '(:background "green")))
                ((eq evil-state 'insert) (propertize " <I> " 'face '(:background "red")))
                ((eq evil-state 'visual) (propertize " <V> " 'face '(:background "yellow")))
                ((eq evil-state 'motion) (propertize " <M> " 'face '(:background "orange")))
                (t "<*>")))
       MY/MODE-LINE-SEPARATOR
       ;; Highlight the file name if there are unsaved changes
       (if (and buffer-file-name (buffer-modified-p))
           (propertize "%b" 'face '(:foreground "red"))
         "%b")
       ))
     ;; Right hand side
     (format-mode-line
      (list
       '(vc-mode vc-mode)
       MY/MODE-LINE-SEPARATOR
       "%4l:%C"
       MY/MODE-LINE-SEPARATOR
       "%p%%"
       MY/MODE-LINE-SEPARATOR
       ))))))
#+end_src

| =evil=            | [[https://github.com/emacs-evil/evil][Github]] |
| =evil-collection= | [[https://github.com/emacs-evil/evil-collection][Github]] |
| =evil-surround=   | [[https://github.com/emacs-evil/evil-surround][Github]] |
| =evil-snipe=      | [[https://github.com/hlissner/evil-snipe][Github]] |
#+begin_src emacs-lisp :tangle yes
;; Vim within Emacs.
(use-package evil
  :straight t
  :init
  (evil-mode +1) ; this has to be loaded before the rest of the package
  :custom
  (evil-want-keybinding nil)
  (evil-want-integration t)
  (evil-want-C-i-jump t) ;; jump forward in the jump-list
  (evil-want-C-w-delete t) ;; default
  (evil-want-C-d-scroll nil)
  (evil-want-C-w-delete t) ;; default
  (evil-disable-insert-state-bindings nil) ;; default
  (evil-want-fine-undo t) ;; actions are undone in several steps
  (evil-undo-system 'undo-redo)
  (evil-move-beyond-eol t)
  (evil-vsplit-window-right t) ;; split to the right not to the left
  (evil-split-window-below t) ;; split below not above
  ;; You can't escape vim
  (evil-toggle-key "")
  :config
  (setq-default evil-shift-width tab-width)
  :bind
  ([remap isearch-forward]  . #'evil-ex-search-forward)
  ([remap isearch-backward] . #'evil-ex-search-backward)
  (:map evil-insert-state-map
        ("C-y" . evil-paste-after) ;; same as in minibuffer
        ("C-g" . evil-normal-state))
  (:map evil-normal-state-map
        ("C-g" . evil-force-normal-state)))

;; Useful vim keybindings for popular modes in Emacs.
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

;; Tim Popes surround plugin for Emacs.
;; https://github.com/emacs-evil/evil-surround
(use-package evil-surround
  :straight t
  :after evil
  :config
  (global-evil-surround-mode +1))

;; Vim-Snipe plugin for Emacs.
;; https://github.com/hlissner/evil-snipe
(use-package evil-snipe
  :straight t
  :after evil
  :custom
  (evil-snipe-scope 'whole-visible)
  (evil-snipe-repeat-scope 'whole-visible)
  (evil-snipe-spillover-scope 'whole-buffer)
  :config
  ;; https://github.com/emacs-evil/evil-collection/tree/master/modes/magit#known-conflicts
  (push 'magit-mode evil-snipe-disabled-modes)
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src

| =general= | [[https://github.com/noctuid/general.el][Github]] |
#+begin_src emacs-lisp :tangle yes
;; Convenient way to manage keybindings
(use-package general
  :straight t
  :config
  (general-evil-setup t)
  ;; Don't use isearch
  (general-setq evil-search-module 'evil-search))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defconst MY/LEADER-KEY "SPC")
(defconst MY/LEADER-FALLBACK-KEY "C-SPC")

;; NOTE: This overrides SPC in every keymap except insert
;; TODO: understand how this works? This is just trail and error for now
(general-create-definer my/leader-def
  :states '(normal insert visual motion replace emacs)
  :keymaps 'override
  :prefix MY/LEADER-KEY ;; normal-state
  :non-normal-prefix MY/LEADER-FALLBACK-KEY) ;; insert-state
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Shift selected text without losing the selection.
;; The same "issue" exists in plain vim.
(general-vmap ">"         'my/evil-shift-right)
(general-vmap "<"         'my/evil-shift-left)
(general-vmap "<tab>"     'my/evil-shift-right)
(general-vmap "TAB"       'my/evil-shift-right)
(general-vmap "<backtab>" 'my/evil-shift-left)
(general-vmap "S-TAB"     'my/evil-shift-left)

(defun my/evil-shift-right ()
  "Shift the selected text to the right without losing the selection."
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun my/evil-shift-left ()
  "Shift the selected text to the left without losing the selection."
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Simulate Tim Popes vim-commentary for Evil
(evil-define-operator my/evil-comment-region (start end)
  "Comment or uncomment the given region"
  (comment-or-uncomment-region start end))

(general-nmap
  "gc" (general-key-dispatch 'my/evil-comment-region
         "c" 'comment-line))
(general-vmap
  "gc" 'my/evil-comment-region)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; This key key-chord will escape the insert state by pressing "j" twice
;; within a very short period of time.
(general-imap "j"
              (general-key-dispatch 'self-insert-command
                ;; Only works with second key is pressed within this time-span
                ;; Otherwise just insert the character.
                :timeout 0.20
                "j" 'evil-normal-state))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/insert-adiaeresis ()
  (interactive)
  (insert "Ã¤"))

(defun my/insert-odiaeresis ()
  (interactive)
  (insert "Ã¶"))

(defun my/insert-udiaeresis ()
  (interactive)
  (insert "Ã¼"))

(define-minor-mode my/umlaut-mode
  "Insert a German umlaut by typing the vowel followed by the character e"
  :lighter "Insert German umlaut by "
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "a")
              (general-key-dispatch 'self-insert-command
                "e" 'my/insert-adiaeresis))
            (define-key map (kbd "o")
              (general-key-dispatch 'self-insert-command
                "e" 'my/insert-odiaeresis))
            (define-key map (kbd "u")
              (general-key-dispatch 'self-insert-command
                "e" 'my/insert-udiaeresis))
            map))
#+end_src

Hide the mouse cursor in the bottom left corner of the screen.
| =avoid=         | [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mouse-Avoidance.html][Built-in]] |
| =disable-mouse= | [[https://github.com/purcell/disable-mouse][Github]]   |
#+begin_src emacs-lisp :tangle yes
(mouse-avoidance-mode 'banish)
(setq mouse-avoidance-banish-position
      '((frame-or-window . frame)
        (side . right)
        (side-pos . 0)
        (top-or-bottom . bottom)
        (top-or-bottom-pos . 0)))

(use-package disable-mouse
  :straight t
  :config
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  :hook (window-setup . global-disable-mouse-mode))
#+end_src

| =hydra= | [[https://github.com/abo-abo/hydra][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :straight t
  :commands defhydra)

;; REVIEW: map all hydras here?
#+end_src

| =which-key= | [[https://github.com/justbur/emacs-which-key][Github]] |
#+begin_src emacs-lisp :tangle yes
;; Displays key bindings following the currently entered incomplete command in a popup.
(use-package which-key
  :straight t
  :custom
  (which-key-idle-delay 0.75)
  (which-key-idle-secondary-delay 0.00)
  (which-key-show-remaining-keys nil)
  :hook (window-setup . which-key-mode))
#+end_src

| =display-line-numbers= | Built-in |
| =hl-line=              | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package display-line-numbers
  :custom
  (display-line-numbers-type 'relative)
  :hook ((text-mode prog-mode) . display-line-numbers-mode))

;; Highlight the current line.
(use-package hl-line
  :custom
  ;; Only hightlight the current line in the active window
  (hl-line-sticky-flag nil)
  :hook ((text-mode prog-mode) . hl-line-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; SEE: https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html
;; FIXME: `font-lock-constant-face' is already bold
(defun my/hl-todo ()
  "Highlight TODO and similar keywords."
  (font-lock-add-keywords
   nil '(("\\(\\<\\(TODO\\)\\>[:]*\\)" 1
          '((nil :inherit warning :weight bold)) t)
         ("\\(\\<\\(FIXME\\)\\>[:]*\\)" 1
          '((nil :inherit error :weight bold)) t)
         ("\\(\\<\\(HACK\\)\\>[:]*\\)" 1
          '((nil :inherit font-lock-constant-face :weight bold)) t)
         ("\\(\\<\\(DEBUG\\)\\>[:]*\\)" 1
          '((nil :inherit font-lock-constant-face :weight bold)) t)
         ("\\(\\<\\(NOTE\\)\\>[:]*\\)" 1
          '((nil :inherit success :weight bold)) t)
         ("\\(\\<\\(SEE\\)\\>[:]*\\)" 1
          '((nil :inherit success :weight bold :slant italic)) t)
         ("\\(\\<\\(REVIEW\\)\\>[:]*\\)" 1
          '((nil :inherit font-lock-keyword-face :weight bold)) t)
         ("\\(\\<\\(DEPRECATED\\)\\>[:]*\\)" 1
          '((nil :inherit font-lock-doc-face :weight bold)) t))))

;; This is buffer local
(add-hook 'prog-mode-hook #'my/hl-todo)
#+end_src

| =tab-bar= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; NOTE: no need to enable tab-bar-mode. If there is more than one tab
;; open at the same time the mode will be enable automatically.
;; TODO: review now settings that came with Emacs 28
(use-package tab-bar
  :commands tab-bar-mode
  :custom
  (tab-bar-show 1) ; hide the tab bar when it has only one tab
  (tab-bar-close-button-show nil) ;; Don't show buttons
  (tab-bar-new-button-show nil)
  (tab-bar-history-buttons-show nil)
  (tab-bar-new-tab-choice "*scratch*") ;; New tabs will show the scratch-buffer
  (tab-bar-new-tab-to 'rightmost)  ;; Always add new tabs to the rightmost position
  ;; (tab-bar-close-last-tab-choice delete-frame)
  :config
  ;; NOTE: gt and gT are alreay mapped by evil-collection in normal state
  (defhydra my/hydra-tab-bar (:color amaranth)
    "Tab Bar Operations"
    ("t"   tab-new "Create a new tab" :column "Action")
    ("0"   tab-close "Close current tab")
    ("o"   tab-close-other "Other" :exit t)
    ("u"   tab-bar-history-back "Undo")
    ("r"   tab-bar-history-forward "Redo")
    ("m"   tab-move "Move current tab" :column "Modification")
    ("r"   tab-rename "Rename Tab")
    ("RET" tab-bar-select-tab-by-name "Select tab by name" :column "Navigation")
    ("l"   tab-next "Next Tab")
    ("h"   tab-previous "Previous Tab")
    ("q"   nil "Quit" :exit t))
  :general
  (my/leader-def "t" '(my/hydra-tab-bar/body :which-key "Tabs"))
  ;; remember window configurations used in every tab (undo / redo)
  :hook (tab-bar-mode . tab-bar-history-mode))
#+end_src

| =help=  | Built-in |
| =eldoc= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; TODO: setup eldoc
(use-package eldoc
  :commands eldoc-mode
  :init
  (global-eldoc-mode -1)
  :custom
  (eldoc-idle-delay 0.75)
  (eldoc-echo-area-display-truncation-message nil)
  (eldoc-echo-area-use-multiline-p 0.25) ; use 25% of the frame
  (eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  (eldoc-echo-area-prefer-doc-buffer 'maybe))

;; navigate back and forwards with </>-keys
(use-package help
  :defer t
  :custom
  (help-window-select t) ;; Always focus the help buffer
  :general
  (my/leader-def
  "h"  '(:keymap help-map :which-key "Help")))
#+end_src

| =elec-pair= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; Automatically insert closing pairs like ", ), ], }
(use-package elec-pair
  :custom
  (electric-pair-preserve-balance nil) ; (default)
  :hook (prog-mode . electric-pair-mode))
#+end_src

| =paren= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; Highlight matching parenthesis
(use-package paren
  :custom
  (show-paren-delay 0.25)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t)
  :hook (prog-mode . show-paren-mode))
#+end_src

| =whitespace= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; Highlight some non printable characters like tabs and trailing spaces
(use-package whitespace
  :custom
  (whitespace-line-column nil) ;; use the value of `fill-column'
  ;; https://github.com/hlissner/doom-emacs/issues/109
  (whitespace-display-mappings
   '((tab-mark ?\t [?Â» ?\t])
     (newline-mark 10 [?Â¬ 10])
     (space-mark 32 [?Â·] [46])))
  (whitespace-style '(face spaces space-mark tabs tab-mark space-before-tab space-after-tab
                           newline newline-mark trailing lines-tail))
  :config
  (defun my/whitespace-write-contents ()
    "Delete trailing whitespaces before saving."
    ;; This is buffer-local by default
    (add-hook 'write-contents-functions
              (lambda()
                (save-excursion
                  (delete-trailing-whitespace)))
              -90)) ; -100: run first / 100: rust last
  :hook
  (prog-mode       . whitespace-mode)
  (whitespace-mode . my/whitespace-write-contents))
#+end_src

| =simple= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; Auto break lines when hitting the `fill-column' limit
(use-package simple
  :custom
  (kill-ring-max 100) ; (default: 60)
  :config
  ;; Don't show a backslash when wrapping a line
  (set-display-table-slot standard-display-table 'wrap ?\ )
  (global-visual-line-mode +1) ; Soft wrap in all buffers
  ;; Enable `auto-fill-mode' for the current buffer
  :hook (prog-mode . auto-fill-mode))
#+end_src

| =ediff= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; https://oremacs.com/2015/01/17/setting-up-ediff/
(use-package ediff
  :commands ediff-mode
  :custom
  (ediff-window-setup-function #'ediff-setup-windows-plain)
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-diff-options "-w") ; ignore whitespaces
  :config
  (ediff-setup-keymap)
  (defun my/ediff-save-window-config ()
    "Save the state of the window configuration before invoking ediff."
    (setq ediff-saved-window-configuration
          (current-window-configuration)))
  (defun my/ediff-restore-window-config ()
    "Restore the window configuration to how it used to be."
    (set-window-configuration ediff-saved-window-configuration))
  :hook
  (ediff-before-setup         . my/ediff-save-window-config)
  ((ediff-quit ediff-suspend) . my/ediff-restore-window-config))
#+end_src

| =ivy= | [[https://github.com/abo-abo/swiper][Github]] |
#+begin_src emacs-lisp :tangle yes
;; Ivy is a generic completion mechanism for Emacs.
(use-package ivy
  :straight t
  :custom
  (ivy-wrap t)
  (ivy-height 12)
  (ivy-auto-select-single-candidate t)
  ;; Do not close the minibuffer with delete
  (ivy-on-del-error-function nil)
  (ivy-extra-directories nil) ;; Don't show . and .. when selecting files
  ;; Add bookmarks and recentf to buffer list
  (ivy-use-virtual-buffers t)
  :config
  ;; REVIEW: use fuzzy matching in any case?
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-ignore-order)
          (t      . ivy--regex-plus)))
  :bind
  (:map ivy-minibuffer-map
        ;; Don't finish the completion when selecting a directory
        ("<return>"    . ivy-alt-done)
        ("RET"         . ivy-alt-done)
        ;; Allow selecting a directory
        ("M-<return>"  . ivy-done)
        ("M-RET"       . ivy-done)
        ("<tab>"       . ivy-next-line)
        ("TAB"         . ivy-next-line)
        ("<backtab>"   . ivy-previous-line)
        ("S-TAB"       . ivy-previous-line)
        ("C-w"         . ivy-backward-kill-word)
        ("C-n"         . ivy-next-history-element)
        ("C-p"         . ivy-previous-history-element))
  :hook (after-init . ivy-mode))
#+end_src

| =counsel= | [[https://github.com/abo-abo/swiper][Github]] |
#+begin_src emacs-lisp :tangle yes
;; NOTE: :after `ivy' doesn't work
(use-package counsel
  :straight t
  :config
  (setenv "FZF_DEFAULT_COMMAND" "rg --files --hidden --follow --glob '!.git'")
  :bind
  ;; Replace evil search with Swiper
  ([remap evil-ex-search-forward]  . #'swiper)
  ([remap evil-ex-search-backward] . #'swiper-backward)
  :general
  (my/leader-def
    "SPC" '(counsel-M-x :which-key "M-x")
    "f"   '(:ignore t :which-key "Find")
    "ff"  'counsel-fzf
    "fg"  'counsel-rg
    "fb"  'counsel-switch-buffer
    "fj"  'counsel-file-jump
    "fl"  'counsel-locate
    "fr"  'counsel-recentf)
  :hook (ivy-mode . counsel-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package prescient
  :straight t
  :commands prescient-persist-mode
  :custom
  (prescient-history-length 50) ; Remember the last 50 entries
  (prescient-sort-length-enable nil) ;; Don't sort by shortest-first.
  (prescient-filter-method '(literal regexp fuzzy))) ; NOTE: not used for now
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package ivy-prescient
  :straight t
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil) ; Let ivy handle the filtering
  (ivy-prescient-retain-classic-highlighting t) ; Keep classic highlighting
  :config
  (ivy-prescient-mode +1)
  (prescient-persist-mode +1))
#+end_src

| =recentf= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :defer 10 ;; defer loading by 10s
  ;; ivy might call this function before this package will load
  :commands recentf-mode
  :custom
  (recentf-max-menu-items 25)
  (recentf-max-saved-items 25)
  (recentf-auto-cleanup "12:00pm") ; clear list at midnight
  ;; No not remember these files
  (recentf-exclude '("\\.lock\\'"
                     "\\.log\\'"
                     "\\.swa?p\\'"
                     "\\.bak\\'"
                     "\\~\\'"))
  :config
  (recentf-mode +1)
  ;; Save every 15 minutes
  (run-at-time nil (* 15 60) 'recentf-save-list))
#+end_src

| =project= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package project
  :defer t
  :general
  (my/leader-def
    "p" '(:keymap project-prefix-map :which-key "Project")))
#+end_src

| =tramp= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; TODO: defer
(use-package tramp
  :custom
  (tramp-default-method "ssh")
  (tramp-default-user user-login-name))
#+end_src

| =dired= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; Emacs build-in file manager
(use-package dired
  :commands (dired dired-jump)
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-listing-switches "-Ahlv --group-directories-first") ;; Change the arguments passed to ls
  (dired-hide-details-hide-symlink-targets nil) ;; ...
  (dired-recursive-copies 'always)
  ;; Omit dotfiles (which are included by `dired-listing-switches')
  (dired-omit-files "^\\..*")
  :config
  ;; use dired-find-alternate-file instead of `dired-find-file' to prevent dired to create so many buffers.
  (put 'dired-find-alternate-file 'disabled nil)
  ;; A hydra for conveniently using dired commands
  ;; TODO: close hydra when the dired buffer is killed
  (defhydra my/hydra-dired (:hint nil :color pink)
    "Dired commands"
    ("(" dired-hide-details-mode "Detail" :column "View")
    (")" dired-omit-mode "Omit")
    ("?" dired-summary "Summary")
    ("g" revert-buffer "Refresh")
    ("=" dired-diff "Diff")
    ("v" dired-view-file "File")
    ("m" dired-mark "Mark" :column "Marking")
    ("t" dired-toggle-marks "Toggle")
    ("u" dired-unmark "Unmark")
    ("U" dired-unmark-all-marks "Unmark all")
    ("z" dired-do-compress "(Un)compress" :column "Actions")
    ("+" dired-create-directory "Create")
    ("T" dired-create-empty-file "Touch")
    ("R" dired-do-rename "Rename")
    ("S" dired-do-symlink "Link")
    ("C" dired-do-copy "Copy")
    ("D" dired-do-delete "Delete")
    ("M" dired-do-chmod "Chmod" :column "Permissions")
    ("O" dired-do-chown "Owner")
    ("G" dired-do-chgrp "Group")
    ;; Mapping q would override view-quit
    ("." nil "Quit" :column "Exit" :exit t))
  :bind
  ([remap dired-find-file] . #'dired-find-alternate-file)
  :general
  (:states 'normal
           :keymaps 'dired-mode-map
           "h" 'dired-up-directory
           "l" 'dired-find-file
           ;; default `dired-do-touch' (change timestamp)
           ;; "T" 'dired-create-empty-file
           "." 'my/hydra-dired/body)
  (my/leader-def
    "d"  '(:ignore t :which-key "Dired")
    "dd" 'dired
    "dj" 'dired-jump))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package latex
  :straight auctex
  :mode ("\\.tex\\'" . LaTeX-mode)
  :config
  (LaTeX-math-mode 1))

(use-package reftex
  :straight auctex
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  :hook (LaTeX-mode . reftex-mode))

(use-package tex
  :after latex
  :custom
  (TeX-PDF-mode t)
  (TeX-auto-save t)
  (TeX-parse-self t)
  :config
  (setq-default TeX-master nil)
  :hook
  (TeX-after-compilation-finished-functions
   . TeX-revert-document-buffer))
#+end_src

Using the version of org that comes with Emacs by default.
Installing org with straight caused a [[https://orgmode.org/worg/org-faq.html#mixed-install][mixed install]] somehow.
| =org= | [[https://orgmode.org/][Org Mode]] |
#+begin_src emacs-lisp :tangle yes
;; A major mode for convenient plain text markup - and much more.
(use-package org
  ;; defer the loading of org-mode possible. If any of the commands below
  ;; get run befor this time load `org-mode' imediatly
  :commands (org-mode org-agenda)
  :custom
  ;; use tab like in the language major mode
  (org-src-tab-acts-natively t)
  ;; do not indent everything when adding a new line
  (org-edit-src-content-indentation 0)
  ;; for the setting above to work, this needs to be nil
  (org-src-preserve-indentation nil)
  (org-directory "~/Nextcloud/Notes/")
  (org-log-done 'time) ;; Add timestamp whenever task is finished
  (org-log-into-drawer t)
  (org-hide-leading-stars t) ;; Don't show all the stars in front of the headings
  (org-agenda-files (list (expand-file-name "todo.org" org-directory)))
  (org-agenda-start-with-log-mode t)
  (org-agenda-window-setup 'other-tab) ;; Open `org-agenda' in a new tab.
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  :general
  ;; Only show these bindings when in org-mode
  (my/leader-def
    "o"  '(:ignore t :which-key "Org")
    "oa" 'org-agenda)
  :hook
  ;; Don't worry about indentation in the outline structure anymore
  (org-mode . org-indent-mode))

;; TODO: org habits
#+end_src

[[https://github.com/Somelauw/evil-org-mode/blob/master/evil-org-agenda.el][Evil Org Agenda]]
#+begin_src emacs-lisp :tangle yes
(evil-set-initial-state 'org-agenda-mode 'motion)
(evil-define-key 'motion org-agenda-mode-map
  ;; Unused keys: D, X
  ;; open
  (kbd "<tab>") 'org-agenda-goto
  (kbd "TAB") 'org-agenda-goto
  (kbd "S-<return>") 'org-agenda-goto
  (kbd "S-RET") 'org-agenda-goto
  (kbd "<return>") 'org-agenda-switch-to
  (kbd "RET") 'org-agenda-switch-to
  (kbd "M-<return>") 'org-agenda-recenter
  (kbd "M-RET") 'org-agenda-recenter
  (kbd "SPC") 'org-agenda-show-and-scroll-up
  (kbd "<delete>") 'org-agenda-show-scroll-down
  (kbd "DEL") 'org-agenda-show-scroll-down
  ;; motion
  "j" 'org-agenda-next-line
  "k" 'org-agenda-previous-line
  "gj" 'org-agenda-next-item
  "gk" 'org-agenda-previous-item
  "gH" 'evil-window-top
  "gM" 'evil-window-middle
  "gL" 'evil-window-bottom
  (kbd "C-j") 'org-agenda-next-item
  (kbd "C-k") 'org-agenda-previous-item
  (kbd "[[") 'org-agenda-earlier
  (kbd "]]") 'org-agenda-later
  ;; manipulation
  "J" 'org-agenda-priority-down
  "K" 'org-agenda-priority-up
  "H" 'org-agenda-do-date-earlier
  "L" 'org-agenda-do-date-later
  "t" 'org-agenda-todo ; default
  (kbd "M-j") 'org-agenda-drag-line-forward
  (kbd "M-k") 'org-agenda-drag-line-backward
  (kbd "C-S-h") 'org-agenda-todo-previousset ; Original binding "C-S-<left>"
  (kbd "C-S-l") 'org-agenda-todo-nextset ; Original binding "C-S-<right>"
  ;; undo
  "u" 'org-agenda-undo
  ;; actions
  "dd" 'org-agenda-kill
  "dA" 'org-agenda-archive
  "da" 'org-agenda-archive-default-with-confirmation
  "ct" 'org-agenda-set-tags
  "ce" 'org-agenda-set-effort
  "cT" 'org-timer-set-timer
  "i" 'org-agenda-diary-entry
  "a" 'org-agenda-add-note
  "A" 'org-agenda-append-agenda
  "C" 'org-agenda-capture
  ;; mark
  "m" 'org-agenda-bulk-toggle
  "~" 'org-agenda-bulk-toggle-all
  "*" 'org-agenda-bulk-mark-all
  "%" 'org-agenda-bulk-mark-regexp
  "M" 'org-agenda-bulk-unmark-all
  "x" 'org-agenda-bulk-action
  ;; refresh
  "gr" 'org-agenda-redo
  "gR" 'org-agenda-redo-all ; rebuild all
  ;; quit
  "ZQ" 'org-agenda-exit
  "ZZ" 'org-agenda-quit
  ;; display
  ;; "Dispatch" can prefix the following:
  ;; 'org-agenda-toggle-deadlines
  ;; 'org-agenda-toggle-diary
  ;; 'org-agenda-follow-mode
  ;; 'org-agenda-log-mode
  ;; 'org-agenda-entry-text-mode
  ;; 'org-agenda-toggle-time-grid
  ;; 'org-agenda-day-view
  ;; 'org-agenda-week-view
  ;; 'org-agenda-year-view
  "gD" 'org-agenda-view-mode-dispatch
  "ZD" 'org-agenda-dim-blocked-tasks
  ;; filter
  "sc" 'org-agenda-filter-by-category
  "sr" 'org-agenda-filter-by-regexp
  "se" 'org-agenda-filter-by-effort
  "st" 'org-agenda-filter-by-tag
  "s^" 'org-agenda-filter-by-top-headline
  "ss" 'org-agenda-limit-interactively
  "S" 'org-agenda-filter-remove-all
  ;; clock
  "I" 'org-agenda-clock-in ; Original binding
  "O" 'org-agenda-clock-out ; Original binding
  "cg" 'org-agenda-clock-goto
  "cc" 'org-agenda-clock-cancel
  "cr" 'org-agenda-clockreport-mode
  ;; go and show
  "." 'org-agenda-goto-today ; default
  "gc" 'org-agenda-goto-calendar
  "gC" 'org-agenda-convert-date
  "gd" 'org-agenda-goto-date
  "gh" 'org-agenda-holidays
  "gm" 'org-agenda-phases-of-moon
  "gs" 'org-agenda-sunrise-sunset
  "gt" 'org-agenda-show-tags
  "p" 'org-agenda-date-prompt
  "P" 'org-agenda-show-the-flagging-note
  ;; 'org-save-all-org-buffers ; Original binding "C-x C-s"
  ;; Others
  "+" 'org-agenda-manipulate-query-add
  "-" 'org-agenda-manipulate-query-subtract)
#+end_src

Evil org mode
#+begin_src emacs-lisp :tangle yes
;; TODO: org-show-all , org-hide, ...
(evil-define-key 'normal org-mode-map
  "gh" 'outline-up-heading
  "gp" 'outline-previous-heading
  "gj" 'org-forward-heading-same-level
  "gk" 'org-backward-heading-same-level
  "gl" 'outline-next-visible-heading
  "go" 'org-open-at-point
  "t" 'org-todo
  "T" 'org-insert-todo-heading
  "H" 'org-shiftleft
  ; "J" 'org-shiftdown ; NOTE: this remaps `evil-join'
  "K" 'org-shiftup
  "L" 'org-shiftright
  ; "o" 'org-insert-heading
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "<" 'org-metaleft
  ">" 'org-metaright
  "-" 'org-cycle-list-bullet
  (kbd "<tab>") 'org-cycle
  (kbd "S-TAB") 'org-cycle)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/exec-path-from-shell ()
  "Ensure environment variables are the same as in the user's shell."
  ;; Get the value of the PATH-variable and split at the ':'-character.
  (let ((path-from-shell (shell-command-to-string "$SHELL -lc 'echo $PATH'")))
    (setq exec-path (split-string path-from-shell path-separator))))

;; Defer running this function: This can take up to 0.1 seconds.
(add-hook 'after-init-hook #'my/exec-path-from-shell)
#+end_src

#+begin_src emacs-lisp :tangle yes
(require 'ansi-color)

(defun colorize-compilation-buffer ()
  "Colorize the compilation buffer and get escapes parsed."
  (ansi-color-apply-on-region compilation-filter-start (point-max)))

(add-hook 'compilation-filter-hook #'colorize-compilation-buffer)
#+end_src

| =eshell= | Built-in |
| =vterm=  | [[https://github.com/akermu/emacs-libvterm][Github]]   |
#+begin_src emacs-lisp :tangle yes
(defconst MY/TERM-HISTORY-SIZE 5000)

;; TODO: configure
(use-package eshell
  :commands eshell
  :custom
  (eshell-history-size MY/TERM-HISTORY-SIZE)
  (eshell-buffer-maximum-lines MY/TERM-HISTORY-SIZE)
  (eshell-hist-ignoredups t)
  :hook
  (eshell-preoutput-filter-functions . ansi-color-filter-apply))

(use-package vterm
  :straight t
  :if (and (executable-find "cmake")
           (executable-find "libtool"))
  :commands (vterm vterm-other-window)
  :custom
  ; kill the buffer when quitting the session
  (vterm-kill-buffer-on-exit t)
  (vterm-max-scrollback MY/TERM-HISTORY-SIZE)
  ; Compile without `vterm-module' without asking first
  (vterm-always-compile-module t)
  :config
  (defun my/vterm-setup-cursor ()
    "Adjust the evil-cursor for the terminal."
    (setq-local evil-move-cursor-back nil
                evil-insert-state-cursor 'box))
  :bind
  ([remap term] . #'vterm)
  (:map vterm-mode-map
        ("C-y"  . evil-paste-after))
  :hook
  (vterm-mode . my/vterm-setup-cursor)
  ; Make sure the buffer name is unique, so that we can use multiple
  ; `vterm' buffers at the same time
  (vterm-mode . rename-uniquely))
#+end_src

| =elpher= | [[https://thelambdalab.xyz/elpher/][The Lambda Lab]] |
#+begin_src emacs-lisp :tangle yes
(use-package elpher
  :straight t
  :commands (elpher-go elpher-bookmarks)
  :custom
  (elpher-use-tls t)
  (elpher-ipv4-always t))
#+end_src

| =writeroom-mode= | [[https://github.com/joostkremers/writeroom-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package writeroom-mode
  :straight t
  :commands writeroom-mode
  :custom
  (writeroom-width 99) ; (default: 80)
  (writeroom-bottom-divider-width 0)
  (writeroom-extra-line-spacing 0.20)
  (writeroom-restore-window-config t)
  :config
  ;; TODO: use auto-fill-mode
  (defun my/disable-ui-elements ()
    "Hide distracting elements of the ui."
    (display-line-numbers-mode -1))
  (defun my/enable-ui-elements ()
    "Restore all elements of the ui."
    (display-line-numbers-mode +1))
  :general
  (my/leader-def
    "z"   '(writeroom-mode :which-key "Zen"))
  :hook
  (writeroom-mode-enable  . my/disable-ui-elements)
  (writeroom-mode-disable . my/enable-ui-elements))
#+end_src

| =elfeed= | [[https://github.com/skeeto/elfeed][Github]] |
#+begin_src emacs-lisp :tangle yes
;; FIXME: hide cursor in elfeed search
;; TODO: setup motion keymap for elfeed search like with org-agenda

(use-package elfeed
  :straight t
  :defer 30
  :commands elfeed
  :custom
  (elfeed-db-directory
   (expand-file-name "elfeed" (or (getenv "XDG_CACHE_HOME") "~/.cache")))
  (elfeed-show-entry-switch #'display-buffer) ; do not swith to the new buffer
  (elfeed-feeds '(("https://nullprogram.com/feed/")
                  ("https://reddit.com/r/emacs/.rss")))
  :config
  (setq url-queue-timeout 30)
  (setq-default elfeed-search-filter "@1-week-ago +unread ")
  (defun my/elfeed-cleanup ()
    "Removed old feeds."
    (elfeed-make-tagger :before "2 weeks ago"
                        :remove 'unread))
  :hook
  (elfeed-db-update . elfeed-db-compact) ; compress the db after updating it
  (elfeed-new-entry . my/elfeed-cleanup)) ; cleanup old feeds when receiving new
#+end_src

A Git Porcelain inside Emacs.
| =magit= | [[https://magit.vc/][Magit]] |
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :straight t
  :defer t
  :general
  (my/leader-def
    "g"   '(:ignore t :which-key "Git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"  '(:ignore t :which-key "Log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase))
#+end_src

| =company= | [[https://github.com/company-mode/company-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package company
  :straight t
  :custom
  (company-backends
   '((company-capf :with company-yasnippet)
     (company-dabbrev-code
      company-keywords
      company-files
      company-dabbrev)))
  (company-require-match 'never)
  (company-dabbrev-downcase nil)
  (company-dabbrev-ignore-case nil)
  (company-selection-wrap-around t)
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (company-tooltip-width-grow-only t)
  (company-tooltip-align-annotations t)
  :bind
  ([remap indent-for-tab-command] . #'company-indent-or-complete-common)
  (:map company-active-map
        ("<return>"  . company-complete-selection)
        ("RET"       . company-complete-selection)
        ("<tab>"     . company-select-next)
        ("TAB"       . company-select-next)
        ("<backtab>" . company-select-previous)
        ("S-TAB"     . company-select-previous))
  :hook
  ((prog-mode org-mode) . company-mode))
#+end_src

| =yasnippet=          | [[https://github.com/joaotavora/yasnippet][Github]] |
| =yasnippet-snippets= | [[https://github.com/AndreaCrotti/yasnippet-snippets][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :straight t
  :custom
  (yas-prompt-functions '(yas-completing-prompt))
  :config
  (yas-reload-all)
  :hook (prog-mode . yas-minor-mode))

(use-package yasnippet-snippets
  :straight t
  :after yasnippet)
#+end_src

| =flyspell= | Built-in |
| =ispell=   | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package flyspell
  :custom
  (flyspell-delay 0.25)
  (flyspell-issue-message-flag nil)
  :hook
  (text-mode . flyspell-mode)
  (prog-mode . flyspell-prog-mode))

(use-package ispell
  :after flyspell
  :custom
  (ispell-program-name "hunspell")
  (ispell-dictionary "en_US,de_DE")
  :config
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic ispell-dictionary))
#+end_src

| =flymake= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package flymake
  :config
  (defhydra my/hydra-flymake
    (:pre (flymake-show-diagnostics-buffer)
          :post (quit-windows-on (format "*Flymake diagnostics for %s*" (buffer-name)))
          :hint nil)
    "Errors"
    ("j"  flymake-goto-next-error "Next")
    ("k"  flymake-goto-prev-error "Previous")
    ("gg" (progn (goto-char (point-max)) (flymake-goto-next-error)) "First")
    ("G"  (progn (goto-char (point-max)) (flymake-goto-prev-error)) "Last")
    ("q"  nil))
  :general
  (my/leader-def "e" '(my/hydra-flymake/body :which-key "Errors"))
  :hook (prog-mode . flymake-mode))
#+end_src

| =eglot= | [[https://github.com/joaotavora/eglot][Github]] |
#+begin_src emacs-lisp :tangle yes
;; NOTE: yasnippet-mode needs to be active before eglot
(use-package eglot
  :straight t
  :commands eglot-ensure
  :custom
  ; only reconnect after failure if the previous connection lastest more then 10 sec
  (eglot-autoreconnect 10)
  ; Shut down the server after killing the last buffer
  (eglot-autoshutdown t)
  ; Unfortuantely there are some servers which are not compliant with the LSP-specification
  (eglot-strict-mode '())
  :config
  (setq read-process-output-max (* 5 1024 1024)) ;; 5mb
  (add-to-list 'eglot-stay-out-of 'company)
  (setq eglot-server-programs
      (append '((yaml-mode         . ("yaml-language-server" "--stdio"))
                (dockerfile-mode   . ("docker-langserver" "--stdio"))
                ((c++-mode c-mode) . "clangd")
                (rust-mode           "rust-analyzer")
                (json-mode         . ("json-languageserver" "--stdio"))
                (mhtml-mode        . ("html-languageserver" "--stdio"))
                (vue-mode          . ("vls" "--stdio"))
                (ts-tsx-mode       . ("typescript-language-server" "--stdio"))
                (css-mode          . ("css-languageserver" "--stdio"))
                (sql-mode          . ("sql-language-server" "up" "--method" "stdio")))
              eglot-server-programs))
  ;; FIXME: this is never added to the hook
  (defun my/eglot-write-contents ()
    "Format the buffer before saving."
    (add-hook 'write-contents-functions
              (lambda()
                (save-excursion
                  (eglot-format-buffer)))
              10))
  :general
  (:states 'normal
           :keymaps 'eglot-mode-map
           "gd"     'xref-find-definitions
           "gr"     'xref-find-references
           "gD"     'eglot-find-declaration
           "gi"     'eglot-find-implementation
           "gt"     'eglot-find-typeDefinition
           "gh"     'eldoc)
  (:states 'visual
           :keymaps 'eglot-mode-map
           "ff" 'eglot-format)
  (my/leader-def
   :states 'normal
   :keymaps 'eglot-mode-map
   "c"   '(:ignore t :which-key "Code")
   "ca"  '(:ignore t :which-key "Actions")
   "caa" 'eglot-code-actions
   "cai" 'eglot-code-action-inline
   "car" 'eglot-code-action-rewrite
   "co"  'eglot-code-action-organize-imports
   "cq"  'eglot-code-action-quickfix
   "ce"  'eglot-code-action-extract
   "cf"  'eglot-format-buffer
   "cr"  'eglot-rename
   "cs"  '(:ignore t :which-key "Server")
   "css" 'eglot-shutdown
   "csr" 'eglot-reconnect)
  :hook
  (eglot-mode . eldoc-mode)
  (eglot-mode . my/eglot-write-contents))
#+end_src

| =rust-mode= | [[https://github.com/rust-lang/rust-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :straight t
  :mode "\\.rs\\'"
  :config
  (defun my/rust-fill-column ()
    (setq-local fill-column 99
                indent-tabs-mode nil))
  :bind
  (:map rust-mode-map
      ("C-c C-c" . rust-run)
      ("C-c C-t" . rust-test)
      ("C-c C-v" . rust-check)
      ("C-c C-l" . rust-run-clippy)
      ("C-c C-b" . rust-compile))
  :hook
  (rust-mode . eglot-ensure)
  (rust-mode . my/rust-fill-column))
#+end_src

| =go-mode= | [[https://github.com/dominikh/go-mode.el][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :straight t
  :mode "\\.go\\'"
  :config
  ;; REVIEW: does this work?
  (setq-local indent-tabs-mode t
              tab-width 2)
  :hook (go-mode . eglot-ensure))
#+end_src


| =python-mode= | Built-in |
| =pyvenv-mode= | [[https://github.com/jorgenschaefer/pyvenv][Github]]   |
#+begin_src emacs-lisp :tangle yes
(use-package python
  :commands python-mode
  :custom
  (python-shell-interpreter "python3")
  :hook (python-mode . eglot-ensure))

;; REVIEW: is this buffer local?
(use-package pyvenv
  :straight t
  :after python
  :config
  (pyvenv-mode +1))
#+end_src

| =c-mode=   | Built-in |
| =c++-mode= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package c-mode
  :commands c-mode
  :hook (c-mode . eglot-ensure))

(use-package c++-mode
  :commands c++-mode
  :hook (c++-mode . eglot-ensure))
#+end_src

| =web-mode= | [[https://github.com/fxbois/web-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :straight t
  :commands web-mode
  :custom
  ; e.g. s/ expands to <span>|</span>.
  (web-mode-enable-auto-expanding t)
  ; adding quotes after  `=` in a tag conflicts with React
  (web-mode-enable-auto-quoting nil))
#+end_src

| =js-mode= | Built-in |
#+begin_src emacs-lisp :tangle yes
; Works for *.js, *.jsx and files
(use-package js
  :config
  (setq-default js-indent-level 2)
  :hook (js-mode . eglot-ensure))
#+end_src

| =typescript-mode= | [[https://github.com/emacs-typescript/typescript.el][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :straight t
  :mode "\\.ts\\'"
  :config
  (setq-default typescript-indent-level 2)
  :hook (typescript-mode . eglot-ensure))

; Unlike js-mode typescript-mode doesn't have support for React files
(define-derived-mode ts-tsx-mode
  web-mode "Typescript React.js"
  "Major mode for tsx-files."
  (setq web-mode-code-indent-offset 2))

(add-to-list 'auto-mode-alist '("\\.tsx\\'" . ts-tsx-mode))
(add-hook 'ts-tsx-mode-hook #'eglot-ensure)
#+end_src

| =vue-mode= | Custom |
#+begin_src emacs-lisp :tangle yes
(define-derived-mode vue-mode
  web-mode "Vue.js"
  "Major mode for vue-files."
  (setq web-mode-code-indent-offset 2))

(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
(add-hook 'vue-mode-hook #'eglot-ensure)
#+end_src

| =sgml-mode= | Built-in |
| =css-mode=  | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package sgml-mode
  :custom
  (sgml-basic-offset 2)
  :hook
  (sgml-mode . eglot-ensure))

(use-package css-mode
  :custom
  (css-indent-offset 2)
  :hook
  (css-mode . eglot-ensure))
#+end_src

| =vue-mode=  | Custom |
| =yaml-mode= | [[https://github.com/yoshiki/yaml-mode][Github]] |
| =nix-mode=  | [[https://github.com/NixOS/nix-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
;; NOTE: js-mode covers json-files
(define-derived-mode json-mode
  js-mode "JSON"
  "Major mode for json-files.")

(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
; use the json-languageserver
(add-hook 'json-mode-hook #'eglot-ensure)

(use-package yaml-mode
  :straight t
  :mode "\\.ya?ml\\'"
  :hook
  (yaml-mode . eglot-ensure))

(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")
#+end_src


| =prettier= | [[https://github.com/jscheid/prettier.el][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package prettier
  :straight t
  :commands (prettier-prettify prettier-prettify-region)
  :custom
  (prettier-inline-errors-flag t)
  (prettier-pre-warm 'none)
  :config
  (defun my/prettier-write-contents ()
    "Format the buffer with prettier before saving."
    (add-hook 'write-contents-functions
              (lambda()
                (save-excursion
                  (prettier-prettify)))
              90))
  :hook ((js-mode
          typescript-mode
          vue-mode
          mhtml-mode
          css-mode
          json-mode
          yaml-mode)
  . prettier-mode)
  (prettier-mode . my/prettier-write-contents))
#+end_src

| =restclient= | [[https://github.com/pashky/restclient.el][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package restclient
  :straight t
  :mode (("\\.http\\'" . restclient-mode)))

; REVIEW: custom bindings? formatting (prettier)?
#+end_src

| =sh-script= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :commands sh-mode
  :custom
  (sh-basic-offset 4) ; Default value
  :hook
  (sh-mode . eglot-ensure))
#+end_src

| =sql= | Built-in |
#+begin_src emacs-lisp :tangle yes
(use-package sql
  :commands sql-mode
  :hook
  (sql-mode . eglot-ensure))
#+end_src

| =markdown-mode= | [[https://github.com/jrblevin/markdown-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :straight t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom
  (markdown-command "multimarkdown"))
#+end_src

| =dockerfile-mode= | [[https://github.com/spotify/dockerfile-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :straight t
  :mode "Dockerfile\\'"
  :custom
  (dockerfile-mode-command "podman")
  :config
  (put 'docker-image-name 'safe-local-variable #'stringp)
  :hook
  (dockerfile-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Systemd-files
(setq auto-mode-alist
      (append '(("\\.service\\'"   . conf-unix-mode)
                ("\\.timer\\'"     . conf-unix-mode)
                ("\\.target\\'"    . conf-unix-mode)
                ("\\.mount\\'"     . conf-unix-mode)
                ("\\.automount\\'" . conf-unix-mode)
                ("\\.slice\\'"     . conf-unix-mode)
                ("\\.socket\\'"    . conf-unix-mode)
                ("\\.path\\'"      . conf-unix-mode)
                ("\\.netdev\\'"    . conf-unix-mode)
                ("\\.network\\'"   . conf-unix-mode)
                ("\\.link\\'"      . conf-unix-mode))
              auto-mode-alist))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; text-scale-adjust looks at the last key typed to determine which action to take.
(global-set-key (kbd "C-=") 'text-scale-adjust)
(global-set-key (kbd "C-+") 'text-scale-adjust)
(global-set-key (kbd "C--") 'text-scale-adjust)
(global-set-key (kbd "C-0") 'text-scale-adjust)
#+end_src

Prefer vertical splitting when the frame is fullscreen.
#+begin_src emacs-lisp :tangle yes
;; prefer vertical splitting when the frame is fullscreen.
(setq split-height-threshold 50
      split-width-threshold 125)

;; https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buffer-Display-Action-Alists
(setq display-buffer-base-action
  '((display-buffer-reuse-window ;; This function tries to display buffer by finding a window that is already displaying it
     ;; if there already is a window with a buffer of the same mode use this one.
     ;; The types of modes to look at in this evaluation are provider with the mode key in the
     ;; alist below
     display-buffer-reuse-mode-window
     display-buffer-in-previous-window ;;  tries to display buffer in a window where it was displayed previously.
     display-buffer-pop-up-window ;; split the window. This respects split-height/width-threshold
     display-buffer-same-window ;; this (current) window
     )
    . ((inhibit-same-window . nil) ;; Allow using the same window.
       (resuable-frames . nil) ;; Do not use other frames
       (inhibit-switch-frame t) ;; prevents an another frame from being raised or selected
       (preserve-size (t . t)) ;; preserve the width and height of the chosen buffer (must already exist)
       ;; display-buffer-reuse-mode-window
       (mode . (help-mode magit-mode eldoc-mode)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; REVIEW: use other color?
(defhydra my/hydra-window (:color amaranth)
  "Window management"
  ("h" windmove-left "Left" :column "Navigate")
  ("j" windmove-down "Down")
  ("k" windmove-up "Up")
  ("l" windmove-right "Right")
  ("v" split-window-vertically "Vertical" :column "Split")
  ("x" split-window-horizontally "Horizontal")
  ("H" windmove-swap-states-left "Left" :column "Swap")
  ("J" windmove-swap-states-down "Down")
  ("K" windmove-swap-states-up "Up")
  ("L" windmove-swap-states-right "Right")
  ("<" shrink-window-horizontally "Shrink (h)" :column "Resize")
  (">" enlarge-window-horizontally "Grow (h)")
  ("," shrink-window "Shrink (v)")
  ("." enlarge-window "Grow (h)")
  ("0" delete-window "Window" :column "Delete")
  ("o" delete-other-windows "Other" :exit t)
  ("u" winner-undo "Undo")
  ("r" winner-redo "Redo")
  ("q" nil "Quit" :column "Exit" :exit t))

(my/leader-def
  "w"  '(my/hydra-window/body :which-key "Windows"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/kill-all-buffers ()
  "kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  ; Change the default directory back to $HOME
  (cd "~/"))

(defun my/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; TODO: reorganize!
(my/leader-def
  "b"  '(:keymap bookmark-map :which-key "Bookmarks")
  "q"  '(:ignore t :which-key "Quit")
  "qb" '(kill-this-buffer :which-key "This buffer")
  "qa" '(my/kill-all-buffers :which-key "All buffers")
  "qo" '(my/kill-other-buffers :which-key "Other buffers")
  "qq" '(save-buffers-kill-terminal :which-key "Emacs"))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; REVIEW: when to use defalias instead?
(evil-ex-define-cmd "eb"     'eval-buffer)
(evil-ex-define-cmd "er"     'eval-region)
(evil-ex-define-cmd "kb"     'kill-buffer)
(evil-ex-define-cmd "kab"    'my/kill-all-buffers)
(evil-ex-define-cmd "cp"     'check-parens)
(evil-ex-define-cmd "mu[4e]" 'mu4e)
(evil-ex-define-cmd "lt"     'load-theme)
#+end_src

Start the server if it's not already running or using Emacs from a terminal
| =server= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; REVIEW: closing buffers like magit commit closes the entire frame
;; REVIEW: rewrite this if necessary
(use-package server
  :if (display-graphic-p)
  :config
  (defun my/server-start-maybe ()
    (unless (server-running-p)
      (add-hook 'after-init-hook #'server-start t)))
  :custom
  (server-kill-new-buffers t)
  (server-raise-frame t) ; raise new frames (default)
  :hook
  (server-done . delete-frame)
  (after-init  . my/server-start-maybe))
#+end_src

| =desktop= | Built-in |
#+begin_src emacs-lisp :tangle yes
;; https://github.com/purcell/emacs.d/blob/master/lisp/init-sessions.el
;; https://www.emacswiki.org/emacs/DeskTop
(use-package desktop
  :custom
  (desktop-base-file-name (expand-file-name "desktop" user-emacs-directory))
  (desktop-base-lock-name (expand-file-name "desktop.lock" user-emacs-directory))
  ; only restore one buffer immediately. The rest is loaded lazy.
  (desktop-restore-eager 1)
  ; don't restore the frame and window configuration
  (desktop-restore-frames nil)
  :config
  ;; TODO: review these settings
  (setq history-length 250)
  ;; TODO: do not store dired, tramp, eglot, *elfeed-search*, ...
  (setq desktop-globals-to-save
        (append '((file-name-history      . 100)
                  (minibuffer-history     . 50)
                  (search-ring            . 20)
                  (ivy-history            . 100)
                  (magit-revision-history . 50))
                desktop-globals-to-save))
  ;; clear everything
  ;; (setq desktop-globals-to-clear ...)
  (defun my/desktop-delete ()
    "Clear and remove the state of Emacs saved in a desktop file."
    (interactive)
    (desktop-clear) ; delete all saved buffers
    (desktop-remove) ; delete the desktop-file
    (desktop-save-mode -1)) ; do not ask to save the current state
  :hook
  (after-init . desktop-read)
  (after-init . desktop-save-mode))

;; REVIEW: (add-hook 'after-init-hook 'savehist-mode)
#+end_src

Minibuffer
#+begin_src emacs-lisp :tangle yes
(define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word)
;; backward-kill-sentence is bound to C-a C-k
#+end_src

#+begin_src emacs-lisp :tangle yes
(add-hook 'after-init #'global-auto-revert-mode)
;; Enable folding by using hide-show-mode
(add-hook 'prog-mode-hook #'hs-minor-mode)
;; winner-mode is used in my/hydra-window
(add-hook 'window-setup-hook #'winner-mode)
#+end_src

| =polymode= | [[https://github.com/polymode/polymode][Github]] |
#+begin_src emacs-lisp :tangle yes
(use-package polymode
  :straight t
  :commands (define-hostmode define-innermode define-polymode)
  :config
  (setq polymode-prefix-key (kbd "C-c n")))
#+end_src

#+begin_src emacs-lisp :tangle yes
(define-hostmode poly-js-hostmode :mode 'js-mode)

(define-innermode poly-css-expr-js-innermode
  :mode 'css-mode
  ;; REVIEW: improve regex?
  :head-matcher "css`.*"
  :tail-matcher ".*`"
  :head-mode 'host
  :tail-mode 'host)

(define-polymode poly-js-css-mode
  :hostmode 'poly-js-hostmode
  :innermodes '(poly-css-expr-js-innermode)
  (define-key poly-js-css-mode-map (kbd "C-c C-c") 'polymode-eval-chunk))

;; TODO: add this mode for ts(x) as well
(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . poly-js-css-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(define-hostmode poly-vue-hostmode :mode 'vue-mode)

(define-innermode poly-css-expr-vue-innermode
  :mode 'css-mode
  ;; REVIEW: improve regex?
  :head-matcher "<style>.*"
  :tail-matcher ".*</style>"
  :head-mode 'host
  :tail-mode 'host)

(define-polymode poly-vue-css-mode
  :hostmode 'poly-vue-hostmode
  :innermodes '(poly-css-expr-vue-innermode)
  (define-key poly-vue-css-mode-map (kbd "C-c C-c") 'polymode-eval-chunk))

;; TODO: add mode for ts, js and html

(add-to-list 'auto-mode-alist '("\\.vue\\'" . poly-vue-css-mode))
#+end_src
