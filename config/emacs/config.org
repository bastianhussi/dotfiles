[[https://github.com/daedreth/UncleDavesEmacs/][Uncle Dave]]
[[https://github.com/howardabrams/dot-files/][Howard Abrams]]
[[https://github.com/angrybacon/dotemacs][Angrybacon]]
[[https://config.daviwil.com/emacs][David Wilson]]

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Bastian Hussi")
#+end_src

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'gnutls
  (eval-when-compile
    (require 'gnutls))
  ;; Path to self signed certificates.
  (add-to-list 'gnutls-trustfiles
               (expand-file-name "ssl/certs/*.pem"
                                 (or (getenv "XDG_CONFIG_HOME") "~/.config")))
  ;; Do not cause an error when the hostname doesn't match the certificateâ€™s host name.
  (setq gnutls-verify-error :trustfiles
        gnutls-min-prime-bits 4096))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install and use use-package
(straight-use-package 'use-package)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Prevent the startup message about GNU Emacs and the GNU system
(fset 'display-startup-echo-area-message 'ignore)
;; Typing out yes / no is waaaaay to tedious
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message nil
      initial-major-mode 'org-mode
      confirm-kill-emacs 'y-or-n-p
      ;; Do not use GTK-Dialogs (e.g. when for confirmation to kill Emacs)
      use-dialog-box nil
      use-file-dialog nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq-default warning-minimum-level :error)
#+end_src

#+begin_src emacs-lisp :tangle yes
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   'utf-8)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package faces
  :commands my/faces-fontset-emojis
  :init
  (setq use-default-font-for-symbols nil) ;; Prevent the default font from displaying symbols
  :custom-face
  (variable-pitch ((t (:family "Cantarell"      :height 150))))
  (fixed-pitch    ((t (:family "Fira Code"      :height 160))))
  (default        ((t (:family "JetBrains Mono" :height 160))))
  :config
  (defun my/faces-fontset-emojis ()
    "Enable colorful emojis."
    (set-fontset-font t 'symbol "Noto Color Emoji")
    (set-fontset-font t 'symbol "Symbola" nil 'append))
  :hook
  (window-setup            . my/faces-fontset-emojis)
  (server-after-make-frame . my/faces-fontset-emojis))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package font-lock
  :defer t
  :custom-face
  (font-lock-constant-face ((t (:weight bold))))
  (font-lock-comment-face  ((t (:slant italic))))
  (font-lock-string-face   ((t (:slant italic))))
  :config
  ;; Increase font-lock speed. Otherwise this may take some time.
  (setq jit-lock-stealth-time 0.10
        jit-lock-stealth-nice 0.00))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package ligature
  :if (>= emacs-major-version 28)
  :straight '(:host github :repo "mickeynp/ligature.el")
  :commands global-ligature-mode
  :config
  (ligature-set-ligatures
   'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
  ;; Enables ligature checks globally in all buffers.
  :hook (window-setup . global-ligature-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes

;; Make Emacs treat underscore as a word character
(modify-syntax-entry ?_ "w")
;; Same for single quotation mark
(modify-syntax-entry ?' "w")
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Hide the cursor in inactive windows
(setq-default cursor-in-non-selected-windows nil
              fill-column 80
              indent-tabs-mode nil
              tab-width 4
              tab-always-indent nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package mwheel
  :defer t
  :custom
  ;; Amount to scroll windows by when spinning the mouse wheel
  (mouse-wheel-scroll-amount '(3 ((shift) . 1)))
  ;; Do not increase scrolling by moving the wheel faster
  (mouse-wheel-progressive-speed nil)
  (mouse-wheel-follow-mouse t))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package epa-file
  :commands epa-file-enable
  :custom
   ;; cache passphrase for symmetric encryption.
  (epa-file-cache-passphrase-for-symmetric-encryption t)
  ;; Any value other than t or nil will prevent Emacs from asking for
  ;; recipients when encrypting files
  (epa-file-select-keys 1)
  :config
  ;; use the minibuffer instead of external program
  (setq epg-pinentry-mode 'loopback)
  ;; Prefer the encrypted authinfo-file
  (setq auth-sources '((:source "~/.authinfo.gpg")
                       (:source "~/.authinfo")))
  ;; ensure this is enabled (is by default)
  :hook (after-init . epa-file-enable))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package files
  :defer t
  :custom
  (large-file-warning-threshold nil) ;; Don't warn for large files
  (backup-by-copying t)
  (delete-old-versions t) ;; Delete old versions without confirmation
  (kept-new-versions 1)
  (kept-old-versions 1)
  (version-control t) ;; use vc unconditionally to backup files
  (backup-directory-alist
   `((".*" . ,temporary-file-directory)))
  (auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t)))
  :config
  (setq auto-save-list-file-prefix temporary-file-directory
        ;; Move files to thrash instead of deleting them right away
        delete-by-moving-to-trash t
        ;; Prevent issues with build-watchers
        create-lockfiles nil))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq ring-bell-function 'ignore)

(use-package nord-theme
  :straight t
  :init
  (setq custom-safe-themes t) ;; All themes are considered safe to load
  :config
  (load-theme 'nord)
  :custom
  (nord-region-highlight 'frost))

;; Load custom theme
(push (expand-file-name "lisp" default-directory) load-path)

;; (use-package nord-theme
;;  :load-path "~/.config/emacs/"
;;  :init
;;  (setq custom-safe-themes t) ;; All themes are considered safe to load
;;  :config
;;  (load-theme 'nord))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Proudly stolen from https://github.com/rougier/elegant-emacs
(defun my/mode-line-render (left right)
  (let* ((available-width (- (window-width) (length left))))
    (format (format "%%s %%%ds" available-width) left right)))

(defconst my/mode-line-separator (propertize " " 'face '(:inherit nil)))

;; REVIEW: defer this? (use window-setup-hook)
;; TODO: split this into functions and move this into its own file
(setq-default
 mode-line-format
 '((:eval
    (my/mode-line-render
     ;; Left hand side
     (format-mode-line
      (list
       my/mode-line-separator
       '(:eval (cond
                ((eq evil-state 'normal) (propertize "<N>" 'face '(:foreground "green")))
                ((eq evil-state 'insert) (propertize "<I>" 'face '(:foreground "red")))
                ((eq evil-state 'visual) (propertize "<V>" 'face '(:foreground "yellow")))
                ((eq evil-state 'motion) (propertize "<M>" 'face '(:foreground "orange")))
                (t "<*>")))
       my/mode-line-separator
       ;; Highlight the file name if there are unsaved changes
       (if (and buffer-file-name (buffer-modified-p))
           (propertize "%b" 'face '(:foreground "red"))
         "%b")
       my/mode-line-separator
       ;; Mode
       (propertize "(%m)" 'face '(:inherit font-lock-comment-face))
       ))
     ;; Right hand side
     (format-mode-line
      (list
       '(vc-mode vc-mode)
       my/mode-line-separator
       "%4l:%C"
       my/mode-line-separator
       "%p%%"
       my/mode-line-separator
       ))))))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Vim within Emacs.
(use-package evil
  :straight t
  :init
  (evil-mode +1)
  :custom
  (evil-want-keybinding nil)
  (evil-want-integration t)
  (evil-want-C-i-jump t) ;; jump forward in the jump-list
  (evil-want-C-w-delete t) ;; default
  (evil-want-C-d-scroll nil)
  (evil-want-C-w-delete t) ;; default
  (evil-disable-insert-state-bindings nil) ;; default
  (evil-want-fine-undo t) ;; actions are undone in several steps
  (evil-undo-system 'undo-redo)
  (evil-move-beyond-eol t)
  (evil-vsplit-window-right t) ;; split to the right not to the left
  (evil-split-window-below t) ;; split below not above
  ;; You can't escape vim
  (evil-toggle-key "")
  :config
  (setq-default evil-shift-width tab-width)
  :bind
  ([remap isearch-forward]  . #'evil-ex-search-forward)
  ([remap isearch-backward] . #'evil-ex-search-backward)
  (:map evil-insert-state-map
        ("C-y" . evil-paste-after) ;; same as in minibuffer
        ("C-g" . evil-normal-state))
  (:map evil-normal-state-map
        ("C-g" . evil-force-normal-state)))

;; Useful vim keybindings for popular modes in Emacs.
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

;; Tim Popes surround plugin for Emacs.
;; https://github.com/emacs-evil/evil-surround
(use-package evil-surround
  :straight t
  :after evil
  :config
  (global-evil-surround-mode +1))

;; Vim-Snipe plugin for Emacs.
;; https://github.com/hlissner/evil-snipe
(use-package evil-snipe
  :straight t
  :after evil
  :custom
  (evil-snipe-scope 'whole-visible)
  (evil-snipe-repeat-scope 'whole-visible)
  (evil-snipe-spillover-scope 'whole-buffer)
  :config
  ;; https://github.com/emacs-evil/evil-collection/tree/master/modes/magit#known-conflicts
  (push 'magit-mode evil-snipe-disabled-modes)
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Convenient way to manage keybindings
(use-package general
  :straight t
  :config
  (general-evil-setup t)
  ;; Don't use isearch
  (general-setq evil-search-module 'evil-search))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defconst my/leader-key "SPC")
(defconst my/leader-fallback-key "C-SPC")

;; NOTE: This overrides SPC in every keymap except insert
;; TODO: understand how this works? This is just trail and error for now
(general-create-definer my/leader-def
  :states '(normal insert visual motion emacs)
  :keymaps 'override
  :prefix my/leader-key ;; normal-state
  :non-normal-prefix my/leader-fallback-key) ;; insert-state
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Shift selected text without losing the selection.
;; The same "issue" exists in plain vim.
(general-vmap ">"         'my/evil-shift-right)
(general-vmap "<"         'my/evil-shift-left)
(general-vmap "<tab>"     'my/evil-shift-right)
(general-vmap "TAB"       'my/evil-shift-right)
(general-vmap "<backtab>" 'my/evil-shift-left)
(general-vmap "S-TAB"     'my/evil-shift-left)

(defun my/evil-shift-right ()
  "Shift the selected text to the right without losing the selection."
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun my/evil-shift-left ()
  "Shift the selected text to the left without losing the selection."
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Simulate Tim Popes vim-commentary for Evil
(evil-define-operator my/evil-comment-region (start end)
  "Comment or uncomment the given region"
  (comment-or-uncomment-region start end))

(general-nmap
  "gc" (general-key-dispatch 'my/evil-comment-region
         "c" 'comment-line))
(general-vmap
  "gc" 'my/evil-comment-region)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; This key key-chord will escape the insert state by pressing "j" twice
;; within a very short period of time.
(general-imap "j"
              (general-key-dispatch 'self-insert-command
                ;; Only works with second key is pressed within this time-span
                ;; Otherwise just insert the character.
                :timeout 0.20
                "j" 'evil-normal-state))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :straight t
  :commands defhydra)

;; REVIEW: map all hydras here?
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Displays key bindings following the currently entered incomplete command in a popup.
(use-package which-key
  :straight t
  :custom
  (which-key-idle-delay 0.75)
  (which-key-idle-secondary-delay 0.00)
  (which-key-show-remaining-keys nil)
  :hook (window-setup . which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package display-line-numbers
  :commands display-line-numbers-mode
  :custom
  (display-line-numbers-type 'relative)
  :hook ((text-mode prog-mode) . display-line-numbers-mode))

;; Highlight the current line.
(use-package hl-line
  :commands hl-line-mode
  :custom
  ;; Only hightlight the current line in the active window
  (hl-line-sticky-flag nil)
  :hook ((text-mode prog-mode) . hl-line-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; SEE: https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html
(defun my/hl-todo ()
  "Highlight TODO and similar keywords."
  (font-lock-add-keywords
   nil '(("\\(\\<\\(TODO\\)\\>[:]*\\)"       1 '((t :foreground "yellow" :weight bold)) t)
         ("\\(\\<\\(FIXME\\)\\>[:]*\\)"      1 '((t :foreground "red" :weight bold)) t)
         ("\\(\\<\\(HACK\\)\\>[:]*\\)"       1 '((t :foreground "red" :weight bold)) t)
         ("\\(\\<\\(DEBUG\\)\\>[:]*\\)"      1 '((t :foreground "red" :weight bold)) t)
         ("\\(\\<\\(NOTE\\)\\>[:]*\\)"       1 '((t :foreground "green" :weight bold)) t)
         ("\\(\\<\\(SEE\\)\\>[:]*\\)"        1 '((t :foreground "green" :weight bold)) t)
         ("\\(\\<\\(REVIEW\\)\\>[:]*\\)"     1 '((t :foreground "blue" :weight bold)) t)
         ("\\(\\<\\(DEPRECATED\\)\\>[:]*\\)" 1 '((t :foreground "blue" :weight bold)) t))))

(add-hook 'prog-mode-hook #'my/hl-todo)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Use tabs within Emacs. The tabbar is only visible when two or more tabs are open
;; NOTE: no need to enable tab-bar-mode. If there is more than one tab the mode will be enable automatically.
(use-package tab-bar
  :commands tab-bar-mode
  :custom
  (tab-bar-close-button-show nil) ;; Don't show buttons
  (tab-bar-new-button-show nil)
  (tab-bar-new-tab-choice "*scratch*") ;; New tabs will show the scratch-buffer
  (tab-bar-new-tab-to 'rightmost)  ;; Always add new tabs to the rightmost position
  :config
  (defhydra my/hydra-tab-bar (:color amaranth)
    "Tab Bar Operations"
    ("t"   tab-new "Create a new tab" :column "Action")
    ("0"   tab-close "Close current tab")
    ("o"   tab-close-other "Other" :exit t)
    ("m"   tab-move "Move current tab" :column "Modification")
    ("r"   tab-rename "Rename Tab")
    ("RET" tab-bar-select-tab-by-name "Select tab by name" :column "Navigation")
    ("l"   tab-next "Next Tab")
    ("h"   tab-previous "Previous Tab")
    ("q"   nil "Quit" :exit t))
  :general
  (my/leader-def "t" '(my/hydra-tab-bar/body :which-key "Tabs")))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; TODO: setup eldoc

;; navigate back and forwards with </>-keys
(use-package help
  :defer t
  :custom
  (help-window-select t) ;; Always focus the help buffer
  :general
  (my/leader-def
  "h"  '(:keymap help-map :which-key "Help")))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Automatically insert closing pairs like ", ), ], }
(use-package elec-pair
  :commands electric-pair-mode
  :custom
  (electric-pair-preserve-balance nil) ;; NOTE: This is the default value
  :hook (prog-mode . electric-pair-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Highlight matching parenthesis
(use-package paren
  :commands show-paren-mode
  :custom
  (show-paren-delay 0.25)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t)
  :hook (prog-mode . show-paren-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Highlight some non printable characters like tabs and trailing spaces
(use-package whitespace
  :commands whitespace-mode
  :custom
  (whitespace-line-column nil) ;; use the value of `fill-column`
  ;; https://github.com/hlissner/doom-emacs/issues/109
  (whitespace-display-mappings
   '((tab-mark ?\t [?Â» ?\t])
     (newline-mark 10 [?Â¬ 10])
     (space-mark 32 [?Â·] [46])))
  (whitespace-style '(face spaces space-mark tabs tab-mark space-before-tab space-after-tab
                           newline newline-mark trailing lines-tail))
  :config
  (defun my/whitespace-cleanup-mode ()
    "Cleanup trailing whitespaces before saving a buffer."
    (add-hook 'before-save-hook #'whitespace-cleanup nil 'local))
  :hook
  (prog-mode       . whitespace-mode)
  (whitespace-mode . my/whitespace-cleanup-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Auto break lines when hitting the fill-column limit
(use-package simple
  :commands auto-fill-mode
  :init
  (global-visual-line-mode 1) ;; Soft wrap in all buffers
  :custom
  (kill-ring-max 100) ;; Default is 60
  :config
  ;; Don't show a backslash when wrapping a line
  (set-display-table-slot standard-display-table 'wrap ?\ )
  :hook
  (prog-mode . auto-fill-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; https://oremacs.com/2015/01/17/setting-up-ediff/
;; TODO: defer loading
(use-package ediff
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-diff-options "-w") ;; ignore whitespaces
  :config
  (ediff-setup-keymap)
  (add-hook 'ediff-after-quit-hook-internal #'winner-undo))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Ivy is a generic completion mechanism for Emacs.
(use-package ivy
  :straight t
  :commands ivy-mode
  :custom
  (ivy-wrap t)
  ;; Add bookmarks and recentf to buffer list
  (ivy-use-virtual-buffers t)
  (ivy-height 12)
  (ivy-auto-select-single-candidate t)
  (ivy-extra-directories nil) ;; Don't show . and .. when selecting files
  ;; Do not close the minibuffer with delete
  (ivy-on-del-error-function nil)
  :config
  ;; use fuzzy matching everywhere except for swiper
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-ignore-order)
          (t      . ivy--regex-plus)))
  :bind
  (:map ivy-minibuffer-map
        ("<return>"  . ivy-done)
        ("RET"       . ivy-done)
        ("<tab>"     . ivy-next-line)
        ("TAB"       . ivy-next-line)
        ("<backtab>" . ivy-previous-line)
        ("S-TAB"     . ivy-previous-line))
  :hook (after-init . ivy-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package prescient
  :straight t
  :commands prescient-persist-mode
  :custom
  (prescient-sort-length-enable nil)
  (prescient-history-length 25))

(use-package ivy-prescient
  :straight t
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  (ivy-prescient-retain-classic-highlighting t)
  :config
  (ivy-prescient-mode +1)
  (prescient-persist-mode +1))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :straight t
  :commands counsel-mode
  :config
  (setenv "FZF_DEFAULT_COMMAND" "rg --files --hidden --follow --glob '!.git'")
  :bind
  ;; Replace evil search with Swiper
  ([remap evil-ex-search-forward]  . #'swiper)
  ([remap evil-ex-search-backward] . #'swiper-backward)
  :general
  (my/leader-def
    "SPC" '(counsel-M-x :which-key "M-x")
    "f"   '(:ignore t :which-key "Find")
    "ff"  'counsel-fzf
    "fg"  'counsel-rg
    "fb"  'counsel-switch-buffer
    "fj"  'counsel-file-jump
    "fl"  'counsel-locate
    "fr"  'counsel-recentf)
  :hook (ivy-mode . counsel-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :defer 10 ;; defer loading by 10s
  ;; ivy might call this function before this package will load
  :commands recentf-mode
  :custom
  (recentf-max-menu-items 25)
  (recentf-max-saved-items 25)
  :config
  (recentf-mode +1)
  ;; Save every 15 minutes
  (run-at-time nil (* 15 60) 'recentf-save-list))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package project
  :defer t
  :general
  (my/leader-def
    "p" '(:keymap project-prefix-map :which-key "Project")))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Emacs build-in file manager
(use-package dired
  :commands (dired dired-jump)
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-listing-switches "-Ahlv --group-directories-first") ;; Change the arguments passed to ls
  (dired-hide-details-hide-symlink-targets nil) ;; ...
  (dired-recursive-copies 'always)
  :config
  ;; use dired-find-alternate-file instead of dired-find-file to prevent dired to create so many buffers.
  (put 'dired-find-alternate-file 'disabled nil)
  ;; A hydra for conveniently using dired commands
  (defhydra my/hydra-dired (:hint nil :color pink)
    "Dired commands"
    ("(" dired-hide-details-mode "Detail" :column "View")
    (")" dired-omit-mode "Omit")
    ("?" dired-summary "Summary")
    ("g" revert-buffer "Refresh")
    ("=" dired-diff "Diff")
    ("v" dired-view-file "File")
    ("m" dired-mark "Mark" :column "Marking")
    ("t" dired-toggle-marks "Toggle")
    ("u" dired-unmark "Unmark")
    ("U" dired-unmark-all-marks "Unmark all")
    ("z" dired-do-compress "(Un)compress" :column "Actions")
    ("+" dired-create-directory "Create")
    ("T" dired-create-empty-file "Touch")
    ("R" dired-do-rename "Rename")
    ("S" dired-do-symlink "Link")
    ("C" dired-do-copy "Copy")
    ("D" dired-do-delete "Delete")
    ("M" dired-do-chmod "Chmod" :column "Permissions")
    ("O" dired-do-chown "Owner")
    ("G" dired-do-chgrp "Group")
    ;; Mapping q would override view-quit
    ("." nil "Quit" :column "Exit" :exit t))
  :bind
  ([remap dired-find-file] . #'dired-find-alternate-file)
  :general
  (:states 'normal
           :keymaps 'dired-mode-map
           "h" 'dired-up-directory
           "l" 'dired-find-file
           ;; default 'dired-do-touch (change timestamp)
           ;; "T" 'dired-create-empty-file
           "." 'my/hydra-dired/body)
  (my/leader-def
    "d"  '(:ignore t :which-key "Dired")
    "dd" 'dired
    "dj" 'dired-jump))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; TODO: is there a way to refactor this?
;; (use-package latex
;;   :straight auctex
;;   :commands latex-mode
;;   :config
;;   (latex-math-mode 1))

(use-package tex-site
  :load-path "site-lisp/auctex/"
  ;; :commands latex-mode
  ;; :mode ("\\.tex\\'" . latex-mode)
  :init
  (setq reftex-plug-into-AUCTeX t))
  

;; (use-package reftex
;;   :straight auctex
;;   :commands reftex-mode
;;   :custom
;;   (reftex-plug-into-AUCTeX t)
;;   (reftex-use-external-file-finders t)
;;   :hook
;;   (latex-mode . reftex-mode))

(use-package tex
  :after tex-site
  :custom
  (TeX-PDF-mode t)
  (TeX-auto-save t)
  (TeX-parse-self t)
  :config
  (setq-default TeX-master nil)
  :hook
  (TeX-after-compilation-finished-functions . TeX-revert-document-buffer))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; A major mode for convenient plain text markup - and much more.
(use-package org
  :straight t
  ;; defer the loading of org-mode possible. If any of the commands below
  ;; get run befor this time load org-mode imediatly
  :commands (org-mode org-agenda)
  :custom
  ;; use tab like in the language major mode
  (org-src-tab-acts-natively t)
  ;; do not indent everything when adding a new line
  (org-edit-src-content-indentation 0)
  ;; for the setting above to work, this needs to be nil
  (org-src-preserve-indentation nil)
  (org-directory "~/Nextcloud/Notes/")
  (org-log-done 'time) ;; Add timestamp whenever task is finished
  (org-log-into-drawer t)
  (org-hide-leading-stars t) ;; Don't show all the stars in front of the headings
  (org-agenda-files (list (expand-file-name "todo.org" org-directory)))
  (org-agenda-start-with-log-mode t)
  (org-agenda-window-setup 'other-tab) ;; Open org-agenda in a new tab.
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  :general
  ;; Only show these bindings when in org-mode
  (my/leader-def
    "o"  '(:ignore t :which-key "Org")
    "oa" 'org-agenda)
  :hook
  ;; Don't worry about indentation in the outline structure anymore
  (org-mode . org-indent-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/exec-path-from-shell ()
  "Ensure environment variables are the same as in the user's shell."
  ;; Get the value of the PATH-variable and split the string at the ':'-character.
  (let ((path-from-shell (shell-command-to-string "$SHELL -lic 'echo $PATH'")))
    (setq exec-path (split-string path-from-shell path-separator))))

;; Defer running this function: This can take up to 0.1 seconds.
(add-hook 'after-init-hook #'my/exec-path-from-shell)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun colorize-compilation-buffer ()
  "Colorize the compilation buffer and get escapes parsed."
  (require 'ansi-color)
  (ansi-color-apply-on-region compilation-filter-start (point-max)))

(add-hook 'compilation-filter-hook #'colorize-compilation-buffer)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar my/term-history-size 5000)

;; TODO: configure
(use-package eshell
  :commands eshell
  :custom
  (eshell-history-size my/term-history-size)
  (eshell-buffer-maximum-lines my/term-history-size)
  (eshell-hist-ignoredups t)
  :hook
  (eshell-preoutput-filter-functions . ansi-color-filter-apply))

(use-package vterm
  :straight t
  :commands (vterm vterm-other-window)
  :custom
  (vterm-kill-buffer-on-exit t) ;; kill the buffer when quitting the session
  (vterm-max-scrollback my/term-history-size)
  :config
  (defun my/vterm-setup-cursor ()
    "Adjust the evil-cursor for the terminal."
    (setq-local evil-move-cursor-back nil
                evil-insert-state-cursor 'box))
  :bind
  ([remap term] . #'vterm)
  (:map vterm-mode-map
        ("C-y"  . evil-paste-after))
  :hook
  (vterm-mode . my/vterm-setup-cursor))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package elpher
  :straight t
  :commands elpher-go
  :custom
  (elpher-use-tls t)
  (elpher-ipv4-always t))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; A Git Porcelain inside Emacs.
(use-package magit
  :straight t
  :defer t
  :general
  (my/leader-def
    "g"   '(:ignore t :which-key "Git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"  '(:ignore t :which-key "Log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package company
  :straight t
  :commands company-mode
  :custom
  (company-backends
   '((company-capf :with company-yasnippet)
     (company-dabbrev-code
      company-keywords
      company-files
      company-dabbrev)))
  (company-require-match 'never)
  (company-dabbrev-downcase nil)
  (company-dabbrev-ignore-case nil)
  (company-selection-wrap-around t)
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (company-tooltip-width-grow-only t)
  (company-tooltip-align-annotations t)
  :bind
  ([remap indent-for-tab-command] . #'company-indent-or-complete-common)
  (:map company-active-map
        ("<return>"  . company-complete-selection)
        ("RET"       . company-complete-selection)
        ("<tab>"     . company-select-next)
        ("TAB"       . company-select-next)
        ("<backtab>" . company-select-previous)
        ("S-TAB"     . company-select-previous))
  :hook
  (prog-mode . company-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar my/prev-whitespace-mode nil)
(make-variable-buffer-local 'my/prev-whitespace-mode)

(defun my/pre-popup-draw ()
  "Turn off whitespace mode before showing company complete tooltip"
  (if whitespace-mode
      (progn
        (setq my/prev-whitespace-mode t)
        (whitespace-mode -1)
        (setq my/prev-whitespace-mode t))))
(defun my/post-popup-draw ()
  "Restore previous whitespace mode after showing company tooltip"
  (if my/prev-whitespace-mode
      (progn
        (whitespace-mode +1)
        (setq my/prev-whitespace-mode nil))))

(advice-add 'company-pseudo-tooltip-unhide :before #'my/pre-popup-draw)
(advice-add 'company-pseudo-tooltip-hide :after #'my/post-popup-draw)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; https://github.com/joaotavora/yasnippet
(use-package yasnippet
  :straight t
  :commands yas-minor-mode
  :custom
  (yas-prompt-functions '(yas-completing-prompt))
  :config
  (yas-reload-all)
  :hook (prog-mode . yas-minor-mode))

;; https://github.com/AndreaCrotti/yasnippet-snippets
(use-package yasnippet-snippets
  :straight t
  :after yasnippet)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package flyspell
  :commands (flyspell-mode flyspell-prog-mode)
  :custom
  (flyspell-delay 0.25)
  (flyspell-issue-message-flag nil)
  :hook
  (text-mode . flyspell-mode)
  (prog-mode . flyspell-prog-mode))

(use-package ispell
  :after flyspell
  :custom
  (ispell-program-name "hunspell")
  (ispell-dictionary "en_US,de_DE")
  :config
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,de_DE"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(my/leader-def "n" '(:ignore t :which-key "Navigate"))

(use-package flymake
  :commands flymake-mode
  :config
  (defhydra my/hydra-flymake
    (:pre (flymake-show-diagnostics-buffer)
          :post (quit-windows-on (format "*Flymake diagnostics for %s*" (buffer-name)))
          :hint nil)
    "Errors"
    ("j"  flymake-goto-next-error "Next")
    ("k"  flymake-goto-prev-error "Previous")
    ("gg" (progn (goto-char (point-max)) (flymake-goto-next-error)) "First")
    ("G"  (progn (goto-char (point-max)) (flymake-goto-prev-error)) "Last")
    ("q"  nil))
  :general
  (my/leader-def "ne" '(my/hydra-flymake/body :which-key "Errors"))
  :hook (prog-mode . flymake-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; NOTE: yasnippet-mode needs to be active before eglot
(use-package eglot
  :straight t
  :after yasnippet
  :commands eglot-ensure
  :custom
  ;; Stop the server when the last buffer was killed
  (eglot-autoshutdown t)
  :config
  (setq read-process-output-max (* 5 1024 1024)) ;; 5mb
  (add-to-list 'eglot-stay-out-of 'company)
  (setq eglot-server-programs
      (append '((yaml-mode . ("yaml-language-server" "--stdio"))
                (dockerfile-mode . ("docker-langserver" "--stdio"))
                ((c++-mode c-mode) . "clangd")
                (rust-mode "rust-analyzer")
                ;; FIXME: doesn't work!
                (vue-mode . ("vls" "--stdio"))
                (css-mode . ("css-languageserver" "--stdio"))
                ;; TODO: setup eglot-ensure for this one
                (sql-mode . ("sql-language-server" "up" "--method" "stdio")))
              eglot-server-programs))
  (defun my/eglot-format-buffer-before-save ()
    "Format the buffer with eglot before saving it"
    (add-hook 'before-save-hook #'eglot-format-buffer nil 'local))
  :general
  (:states 'normal
           :keymaps 'eglot-mode-map
           "<f2>"   'eglot-rename
           "gd"     'xref-find-definitions
           "gr"     'xref-find-references
           "gD"     'eglot-find-declaration
           "gi"     'eglot-find-implementation
           "gt"     'eglot-find-typeDefinition
           "gh"     'eldoc)
  (:states 'visual
           :keymaps 'eglot-mode-map
           "ff" 'eglot-format)
  (my/leader-def
   :states 'normal
   :keymaps 'eglot-mode-map
   "c"   '(:ignore t :which-key "Code")
   "ca"  '(:ignore t :which-key "Actions")
   "caa" 'eglot-code-actions
   "cai" 'eglot-code-action-inline
   "car" 'eglot-code-action-rewrite
   "co"  'eglot-code-action-organize-imports
   "cq"  'eglot-code-action-quickfix
   "ce"  'eglot-code-action-extract
   "cf"  'eglot-format-buffer
   "cr"  'eglot-rename
   "cs"  '(:ignore t :which-key "Server")
   "css" 'eglot-shutdown
   "csr" 'eglot-reconnect)
  :hook
  (eglot-mode . eldoc-mode)
  (eglot-mode . my/eglot-format-buffer-before-save))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; https://github.com/rust-lang/rust-mode
(use-package rust-mode
  :straight t
  :mode "\\.rs\\'"
  :config
  (defun my/rust-adjust-fill-column ()
    "Adjust the fill-column variable for rust-mode."
    (setq-local fill-column 99
                indent-tabs-mode nil))
  :bind
  ;; REVIEW: are those bindings necessary?
  (:map rust-mode-map
        ("C-c C-r" . rust-run)
        ("C-c C-t" . rust-test)
        ("C-c C-c" . rust-check)
        ("C-c C-v" . rust-run-clippy)
        ("C-c C-b" . rust-compile))
  :hook
  (rust-mode . eglot-ensure)
  (rust-mode . my/rust-adjust-fill-column))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :straight t
  :mode "\\.go\\'"
  :config
  (setq-local indent-tabs-mode t
              tab-width 2)
  :hook (go-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package python
  :commands python-mode
  :custom
  (python-shell-interpreter "python3")
  :hook (python-mode . eglot-ensure))

(use-package pyvenv
  :straight t
  :commands pyvenv-mode
  :hook (python-mode . pyvenv-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package c-mode
  :commands c-mode
  :hook (c-mode . eglot-ensure))

(use-package c++-mode
  :commands c++-mode
  :hook (c++-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package js
  :commands js-mode
  :config
  (setq-default js-indent-level 2)
  :hook (js-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :straight t
  :mode "\\.tsx?\\'"
  :config
  (setq-default typescript-indent-level 2)
  :hook (typescript-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :straight t
  :commands web-mode
  :custom
  (web-mode-code-indent-offset 2))
#+end_src

#+begin_src emacs-lisp :tangle yes
(define-derived-mode vue-mode
  web-mode "Vue.js"
  "Major mode for vue.js files."
  (setq web-mode-code-indent-offset 2))

(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
(add-hook 'vue-mode-hook #'eglot-ensure)
#+end_src

| =sgml-mode= | Built-in |
| =css-mode=  | Built-in |
#+begin_src emacs-lisp :tangle yes
;; TODO: rethink sqml-, mhtml, and html-mode
(use-package sgml-mode
  ;; :mode "\\.html?\\'"
  :custom
  (sgml-basic-offset 2)
  :hook
  (sgml-mode . eglot-ensure))

(use-package css-mode
  :commands css-mode
  :custom
  (css-indent-offset 2)
  :hook
  (css-mode . eglot-ensure))
#+end_src

| json-mode | [[https://github.com/joshwnj/json-mode][Github]] |
| yaml-mode | [[https://github.com/yoshiki/yaml-mode][Github]] |
| nix-mode  | [[https://github.com/NixOS/nix-mode][Github]] |
#+begin_src emacs-lisp :tangle yes
;; DEPRECATED: last update 23.01.19
(use-package json-mode
  :straight t
  :mode "\\.json\\'"
  :hook
  (json-mode . eglot-ensure))

(use-package yaml-mode
  :straight t
  :mode "\\.ya?ml\\'"
  :hook
  (yaml-mode . eglot-ensure))

(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :commands sh-mode
  :custom
  (sh-basic-offset 2)
  :hook
  (sh-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package sql
  :commands sql-mode
  :hook
  (sql-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; https://jblevins.org/projects/markdown-mode/
(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom
  (markdown-command "multimarkdown"))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; https://github.com/spotify/dockerfile-mode
(use-package dockerfile-mode
  :straight t
  :mode "Dockerfile\\'"
  :custom
  (dockerfile-mode-command "podman")
  :config
  (put 'docker-image-name 'safe-local-variable #'stringp)
  :hook
  (dockerfile-mode . eglot-ensure))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Systemd-files
(setq auto-mode-alist
      (append '(("\\.service\\'"   . conf-unix-mode)
                ("\\.timer\\'"     . conf-unix-mode)
                ("\\.target\\'"    . conf-unix-mode)
                ("\\.mount\\'"     . conf-unix-mode)
                ("\\.automount\\'" . conf-unix-mode)
                ("\\.slice\\'"     . conf-unix-mode)
                ("\\.socket\\'"    . conf-unix-mode)
                ("\\.path\\'"      . conf-unix-mode)
                ("\\.netdev\\'"    . conf-unix-mode)
                ("\\.network\\'"   . conf-unix-mode)
                ("\\.link\\'"      . conf-unix-mode))
              auto-mode-alist))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; text-scale-adjust looks at the last key typed to determine which action to take.
(global-set-key (kbd "C-+") 'text-scale-adjust)
(global-set-key (kbd "C--") 'text-scale-adjust)
(global-set-key (kbd "C-0") 'text-scale-adjust)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; prefer vertical splitting when the frame is fullscreen.
(setq split-height-threshold 50
      split-width-threshold 125)

;; https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buffer-Display-Action-Alists
(setq display-buffer-base-action
  '((display-buffer-reuse-window ;; This function tries to display buffer by finding a window that is already displaying it
     ;; if there already is a window with a buffer of the same mode use this one.
     ;; The types of modes to look at in this evaluation are provider with the mode key in the
     ;; alist below
     display-buffer-reuse-mode-window
     display-buffer-in-previous-window ;;  tries to display buffer in a window where it was displayed previously.
     display-buffer-pop-up-window ;; split the window. This respects split-height/width-threshold
     display-buffer-same-window ;; this (current) window
     )
    . ((inhibit-same-window . nil) ;; Allow using the same window.
       (resuable-frames . nil) ;; Do not use other frames
       (inhibit-switch-frame t) ;; prevents an another frame from being raised or selected
       (preserve-size (t . t)) ;; preserve the width and height of the chosen buffer (must already exist)
       ;; display-buffer-reuse-mode-window
       (mode . (help-mode magit-mode eldoc-mode)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; REVIEW: use other color?
(defhydra my/hydra-window (:color amaranth)
  "Window management"
  ("h" windmove-left "Left" :column "Navigate")
  ("j" windmove-down "Down")
  ("k" windmove-up "Up")
  ("l" windmove-right "Right")
  ("v" split-window-vertically "Vertical" :column "Split")
  ("x" split-window-horizontally "Horizontal")
  ("H" windmove-swap-states-left "Left" :column "Swap")
  ("J" windmove-swap-states-down "Down")
  ("K" windmove-swap-states-up "Up")
  ("L" windmove-swap-states-right "Right")
  ("<" shrink-window-horizontally "Shrink (h)" :column "Resize")
  (">" enlarge-window-horizontally "Grow (h)")
  ("," shrink-window "Shrink (v)")
  ("." enlarge-window "Grow (h)")
  ("0" delete-window "Window" :column "Delete")
  ("o" delete-other-windows "Other" :exit t)
  ("u" winner-undo "Undo")
  ("r" winner-redo "Redo")
  ("q" nil "Quit" :column "Exit" :exit t))

(my/leader-def
  "w"  '(my/hydra-window/body :which-key "Windows"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/kill-all-buffers ()
  "kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; TODO: reorganize!
(my/leader-def
  "b"  '(:keymap bookmark-map :which-key "Bookmarks")
  "q"  '(:ignore t :which-key "Quit")
  "qb" '(kill-this-buffer :which-key "This buffer")
  "qa" '(my/kill-all-buffers :which-key "All buffers")
  "qq" '(save-buffers-kill-terminal :which-key "Emacs"))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; REVIEW: when to use defalias instead?
(evil-ex-define-cmd "eb"     'eval-buffer)
(evil-ex-define-cmd "er"     'eval-region)
(evil-ex-define-cmd "kb"     'kill-buffer)
(evil-ex-define-cmd "kab"    'my/kill-all-buffers)
(evil-ex-define-cmd "cp"     'check-parens)
(evil-ex-define-cmd "mu[4e]" 'mu4e)
(evil-ex-define-cmd "lt"     'load-theme)
#+end_src

#+begin_src emacs-lisp :tangle yes
(require 'server)
(unless (server-running-p)
  (add-hook 'after-init-hook #'server-start t))
(custom-set-variables '(server-kill-new-buffers t))
(add-hook 'server-done-hook #'delete-frame)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package desktop
  :ensure nil
  :hook
  (after-init . desktop-read)
  (after-init . desktop-save-mode)
  :custom
  (desktop-base-file-name (expand-file-name "desktop" user-emacs-directory))
  (desktop-base-lock-name (expand-file-name "desktop.lock" user-emacs-directory))
  (desktop-restore-eager 1) ;; only restore one buffer immediately
  (desktop-restore-frames nil))
#+end_src

#+begin_src emacs-lisp :tangle yes
(add-hook 'after-init #'global-auto-revert-mode)
;; Enable folding by using hide-show-mode
(add-hook 'prog-mode-hook #'hs-minor-mode)
;; winner-mode is used in my/hydra-window and ediff
(add-hook 'window-setup-hook #'winner-mode)
#+end_src
